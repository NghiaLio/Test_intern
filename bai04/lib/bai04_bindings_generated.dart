// ignore_for_file: always_specify_types
// ignore_for_file: camel_case_types
// ignore_for_file: non_constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;
import 'dart:ffi';
import 'package:ffi/ffi.dart';

/// Bindings for `src/bai04.h`.
///
/// Regenerate bindings with `dart run ffigen --config ffigen.yaml`.

typedef GetStepsNative = Pointer<Pointer<Int32>> Function(
    Pointer<Int32>, Int32, Pointer<Int32>);
typedef GetStepsDart = Pointer<Pointer<Int32>> Function(
    Pointer<Int32>, int, Pointer<Int32>);

typedef FreeStepsNative = Void Function(Pointer<Pointer<Int32>>, Int32);
typedef FreeStepsDart = void Function(Pointer<Pointer<Int32>>, int);

class Bai04Bindings {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  Bai04Bindings(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  Bai04Bindings.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  late final GetStepsDart getSteps = 
      _lookup<NativeFunction<GetStepsNative>>('get_sort_steps')
      .asFunction<GetStepsDart>();

  late final FreeStepsDart freeSteps = 
      _lookup<NativeFunction<FreeStepsNative>>('free_steps')
      .asFunction();

  Future<List<List<int>>> getSortSteps(List<int> data) async {
    final ptr = calloc<Int32>(data.length);
    final stepCountPtr = calloc<Int32>();

    for (int i = 0; i < data.length; i++) {
      ptr[i] = data[i];
    }

    final result = getSteps(ptr, data.length, stepCountPtr);
    final stepCount = stepCountPtr.value;

    List<List<int>> steps = [];
    for (int i = 0; i < stepCount; i++) {
      final stepPtr = result.elementAt(i).value;
      steps.add(List.generate(data.length, (j) => stepPtr[j]));
    }

    freeSteps(result, stepCount);
    calloc.free(ptr);
    calloc.free(stepCountPtr);
    return steps;
  }
}
