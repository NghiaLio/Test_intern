// ignore_for_file: always_specify_types
// ignore_for_file: camel_case_types
// ignore_for_file: non_constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;
import 'dart:ffi';
import 'package:ffi/ffi.dart';

/// Bindings for `src/bai03.h`.
///
/// Regenerate bindings with `dart run ffigen --config ffigen.yaml`.
///
// Position struct tương ứng với C
final class Position extends Struct {
  @Int32()
  external int row;

  @Int32()
  external int col;
}

// Chữ ký C và Dart
typedef C_GetSolutions = Pointer<Position> Function(Pointer<Int32>);
typedef Dart_GetSolutions = Pointer<Position> Function(Pointer<Int32>);

class Bai03Bindings {
  static const int N = 8;
  static const int MAX_SOLUTIONS = 100;
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  Bai03Bindings(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  Bai03Bindings.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  /// A very short-lived native function.
  ///
  /// For very short-lived functions, it is fine to call them on the main isolate.
  /// They will block the Dart execution while running the native function, so
  /// only do this for native functions which are guaranteed to be short-lived.
  int sum(
    int a,
    int b,
  ) {
    return _sum(
      a,
      b,
    );
  }

  late final _sumPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Int)>>('sum');
  late final _sum = _sumPtr.asFunction<int Function(int, int)>();

  /// A longer lived native function, which occupies the thread calling it.
  ///
  /// Do not call these kind of native functions in the main isolate. They will
  /// block Dart execution. This will cause dropped frames in Flutter applications.
  /// Instead, call these native functions on a separate isolate.
  int sum_long_running(
    int a,
    int b,
  ) {
    return _sum_long_running(
      a,
      b,
    );
  }

  late final _sum_long_runningPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Int)>>(
          'sum_long_running');
  late final _sum_long_running =
      _sum_long_runningPtr.asFunction<int Function(int, int)>();

  // / A native function that returns a string.
  int multiply(int a, int b) {
    return _multiply(
      a,
      b,
    );
  }

  late final _multiplyPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Int)>>('multiply');
  late final _multiply =
      _multiplyPtr.asFunction<int Function(int, int)>();

      
  late final _getSolutionsPtr =
      _lookup<ffi.NativeFunction<C_GetSolutions>>('get_solutions');
  late final _getSolutions = _getSolutionsPtr.asFunction<Dart_GetSolutions>();
  // Trả về một list các nghiệm. Mỗi nghiệm là List<Position> độ dài 8.
  List<List<Position>> getAllSolutions() {
    final countPtr = calloc<Int32>();
    final ptr = _getSolutions(countPtr);
    final count = countPtr.value;
    calloc.free(countPtr);

    List<List<Position>> results = [];

    for (var solIndex = 0; solIndex < count; solIndex++) {
      List<Position> oneSolution = [];
      for (var j = 0; j < 8; j++) {
        final posPtr = ptr.elementAt(solIndex * 8 + j);
        oneSolution.add(posPtr.ref);
      }
      results.add(oneSolution);
    }
     return results;
  }
}


